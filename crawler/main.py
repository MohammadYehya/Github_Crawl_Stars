from Github_Client import GitHubClient
import psycopg2
import os
import time

client = GitHubClient(os.getenv("GITHUB_TOKEN"))
conn = psycopg2.connect(
    host=os.getenv('PGHOST'),
    port=os.getenv('PGPORT'),
    dbname=os.getenv('PGDATABASE'),
    user=os.getenv('PGUSER'),
    password=os.getenv('PGPASSWORD')
)
cur = conn.cursor()

query = """
query ($cursor: String, $queryStr: String!) {
  search(query: $queryStr, type: REPOSITORY, first: 100, after: $cursor) {
    pageInfo {
      endCursor
      hasNextPage
    }
    nodes {
      ... on Repository {
        id
        nameWithOwner
        stargazerCount
      }
    }
  }
}
"""

# Split function
def split_range(r):
    s, e = map(int, r.split('..'))
    if e - s <= 1:
        return []
    m = (s + e) // 2
    return [f"{s}..{m}", f"{m+1}..{e}"]

# Initial slice setup
star_ranges = [
    (200001, 210000), (210001, 220000), (220001, 230000), (230001, 240000), (240001, 250000),
    (250001, 260000), (260001, 270000), (270001, 280000), (280001, 290000), (290001, 300000),
    (300001, 310000), (310001, 320000), (320001, 330000), (330001, 340000), (340001, 350000),
    (350001, 360000), (360001, 370000), (370001, 380000), (380001, 390000), (390001, 400000),
    (400001, 410000), (410001, 420000), (420001, 430000), (430001, 440000), (440001, 450000),
    (450001, 460000), (460001, 470000), (470001, 480000), (480001, 490000), (490001, 500000),
    (150001, 155000), (155001, 160000), (160001, 165000), (165001, 170000), (170001, 175000),
    (175001, 180000), (180001, 185000), (185001, 190000), (190001, 195000), (195001, 200000),
    (100001, 105000), (105001, 110000), (110001, 115000), (115001, 120000), (120001, 125000),
    (125001, 130000), (130001, 135000), (135001, 140000), (140001, 145000), (145001, 150000),
    (90001, 91000), (91001, 92000), (92001, 93000), (93001, 94000), (94001, 95000),
    (95001, 96000), (96001, 97000), (97001, 98000), (98001, 99000), (99001, 100000),
    (80001, 81000), (81001, 82000), (82001, 83000), (83001, 84000), (84001, 85000),
    (85001, 86000), (86001, 87000), (87001, 88000), (88001, 89000), (89001, 90000),
    (70001, 71000), (71001, 72000), (72001, 73000), (73001, 74000), (74001, 75000),
    (75001, 76000), (76001, 77000), (77001, 78000), (78001, 79000), (79001, 80000),
    (60001, 61000), (61001, 62000), (62001, 63000), (63001, 64000), (64001, 65000),
    (65001, 66000), (66001, 67000), (67001, 68000), (68001, 69000), (69001, 70000),
    (50001, 51000), (51001, 52000), (52001, 53000), (53001, 54000), (54001, 55000),
    (55001, 56000), (56001, 57000), (57001, 58000), (58001, 59000), (59001, 60000),
    (40001, 40500), (40501, 41000), (41001, 41500), (41501, 42000), (42001, 42500),
    (42501, 43000), (43001, 43500), (43501, 44000), (44001, 44500), (44501, 45000),
    (45001, 45500), (45501, 46000), (46001, 46500), (46501, 47000), (47001, 47500),
    (47501, 48000), (48001, 48500), (48501, 49000), (49001, 49500), (49501, 50000),
    (30001, 30500), (30501, 31000), (31001, 31500), (31501, 32000), (32001, 32500),
    (32501, 33000), (33001, 33500), (33501, 34000), (34001, 34500), (34501, 35000),
    (25001, 25500), (25501, 26000), (26001, 26500), (26501, 27000), (27001, 27500),
    (27501, 28000), (28001, 28500), (28501, 29000), (29001, 29500), (29501, 30000),
    (10001, 10100), (10101, 10200), (10201, 10300), (10301, 10400), (10401, 10500),
    (10501, 10600), (10601, 10700), (10701, 10800), (10801, 10900), (10901, 11000),
    (11001, 11100), (11101, 11200), (11201, 11300), (11301, 11400), (11401, 11500),
    (11501, 11600), (11601, 11700), (11701, 11800), (11801, 11900), (11901, 12000),
    (1001, 1100), (1101, 1200), (1201, 1300), (1301, 1400), (1401, 1500),
    (1501, 1600), (1601, 1700), (1701, 1800), (1801, 1900), (1901, 2000),
    (101, 125), (126, 150), (151, 175), (176, 200),
    (1, 10), (11, 20), (21, 30), (31, 40), (41, 50),
    (51, 60), (61, 70), (71, 80), (81, 90), (91, 100)
]


slices = [f"stars:{s}..{e}" for s, e in star_ranges]

# Crawl settings
count = 0
limit = 100000
minstars = 999999
tempminstars = minstars
cursor = None

# Crawl loop
while count < limit:
    qstr = f"stars:<{minstars}"
    while True:
        try:
            print(f"Min Stars: {minstars}, cursor: {cursor}")
            result = client.run_query(query, {"cursor": cursor, "queryStr": qstr})
            break
        except:
          time.sleep(5)
    if 'data' not in result or 'search' not in result['data']:
        break
    repos = result['data']['search']['nodes']
    for repo in repos:
        cur.execute('''
            INSERT INTO repositories (repo_id, name, stars)
            VALUES (%s, %s, %s)
            ON CONFLICT (repo_id) DO UPDATE
            SET stars = EXCLUDED.stars, last_updated = CURRENT_TIMESTAMP;
        ''', (repo['id'], repo['nameWithOwner'], repo['stargazerCount']))
        count += 1
        if count >= limit:
            break
    if not result['data']['search']['pageInfo']['hasNextPage']:
      minstars = tempminstars
      cursor = None
    else:
      tempminstars = repos[-1]['stargazerCount']
      cursor = result['data']['search']['pageInfo']['endCursor']
        
    time.sleep(1)

conn.commit()
cur.close()
conn.close()